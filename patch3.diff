Index: Lib/test/test_smtplib.py
===================================================================
--- Lib/test/test_smtplib.py	(revision 56154)
+++ Lib/test/test_smtplib.py	(working copy)
@@ -1,13 +1,17 @@
+import asyncore
 import socket
 import threading
+import smtpd
 import smtplib
+import StringIO
+import sys
 import time
 
 from unittest import TestCase
 from test import test_support
 
 
-def server(evt):
+def general_server(evt):
     serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
     serv.settimeout(3)
     serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
@@ -28,7 +32,7 @@
 
     def setUp(self):
         self.evt = threading.Event()
-        threading.Thread(target=server, args=(self.evt,)).start()
+        threading.Thread(target=general_server, args=(self.evt,)).start()
         time.sleep(.1)
 
     def tearDown(self):
@@ -62,10 +66,79 @@
         self.assertEqual(smtp.sock.gettimeout(), 30)
         smtp.sock.close()
 
+def debugging_server(evt):
+    serv = smtpd.DebuggingServer(("localhost", 9091), ('nowhere', -1))
 
+    try:
+        asyncore.loop(timeout=.01, count=200)
+    except socket.timeout:
+        pass
+    finally:
+        asyncore.close_all()
+        evt.set()
 
+
+class DebuggingServerTests(TestCase):
+
+    def setUp(self):
+        self.old_stdout = sys.stdout
+        self.output = StringIO.StringIO()
+        sys.stdout = self.output
+
+        self.evt = threading.Event()
+        threading.Thread(target=debugging_server, args=(self.evt,)).start()
+        time.sleep(.1)
+
+    def tearDown(self):
+        self.evt.wait()
+        sys.stdout = self.old_stdout
+
+    def testBasic(self):
+        # connects
+        smtp = smtplib.SMTP("localhost", 9091)
+        smtp.sock.close()
+
+    def testSend(self):
+        # connects
+        smtp = smtplib.SMTP("localhost", 9091)
+        smtp.sendmail('John', 'Sally', 'Message')
+        smtp.sock.close()
+
+
+def failing_server(evt):
+    serv = smtpd.DebuggingServer(("localhost", 9091), ('nowhere', -1))
+
+    try:
+        asyncore.loop(timeout=.01, count=200)
+    except socket.timeout:
+        pass
+    finally:
+        asyncore.close_all()
+        evt.set()
+
+
+class FailingServerTests(TestCase):
+
+    def setUp(self):
+        self.old_stdout = sys.stdout
+        self.output = StringIO.StringIO()
+        sys.stdout = self.output
+
+        self.evt = threading.Event()
+        threading.Thread(target=failing_server, args=(self.evt,)).start()
+        time.sleep(.1)
+
+    def tearDown(self):
+        self.evt.wait()
+        sys.stdout = self.old_stdout
+
+    def testFailingHELO(self):
+        smtp = smtplib.SMTP("localhost", 9091)
+        self.assertRaises(smtplib.SMTPHeloError, smtp.helo)
+
 def test_main(verbose=None):
-    test_support.run_unittest(GeneralTests)
+    test_support.run_unittest(GeneralTests, DebuggingServerTests)
+#    test_support.run_unittest(GeneralTests)
 
 if __name__ == '__main__':
     test_main()
